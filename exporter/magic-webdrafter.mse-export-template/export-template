mse version: 0.3.8
short name: PlaneSculptors
full name: PlaneSculptors Export 1.0
position hint: 006
version: 2015-02-14
installer group: magic/Export/planesculptors
create directory: true

depends on:
	package: magic.mse-game
	version: 2009-07-23

game: magic
file type: *.txt|*.txt|*.*|*.*

# By caeonosphere
# Written by modifying thequinn's IsochronDrafter exporter ()

script:
	symbol_font      := "magic-mana-small"
	symbol_font_size := 12
	escape_linebreaks := replace@(match: "\n", replace: "///br///")
	determine_shape := {
		if (contains(card.shape, match:"normal") or contains(card.shape, match:"planeswalker") or card.loyalty_2 != "") and card.name_2 != "" then "double"
		else if contains(card.shape, match:"leveler") then "normal"
		else if contains(card.shape, match:"planeswalker") then "normal"
		else card.shape
	}
	
	paragraph_count := replace@(match:"\n", replace:"•")+
		filter_text@(match:"•")
	
	write_leveler := {
		card.rule_text
		+"\nLEVEL "+card.level_1+" | "
			+(if card.pt_2 !="" then card.pt_2+" | ")
			+card.rule_text_2
		+"\n"+(if card.level_2 !="" then "LEVEL "+card.level_2+" | ")
			+(if card.pt_3 !="" then card.pt_3+" | ")
			+card.rule_text_3
		}
		
	write_walker := {
		# The First Ability
		card.loyalty_cost_1
			+(if card.loyalty_cost_1 !="" then ": ")
			+split_text(match:"\n", card.rule_text).0
		# The Second Ability
		+(if contains(paragraph_count(card.rule_text), match:"•") then "\n")
			+card.loyalty_cost_2
			+(if card.loyalty_cost_2 !="" then ": ")
			+(if contains(paragraph_count(card.rule_text), match:"•") then split_text(match:"\n", card.rule_text).1)
		# The Third Ability
		+(if contains(paragraph_count(card.rule_text), match:"••") then "\n")
			+card.loyalty_cost_3
			+(if card.loyalty_cost_3 !="" then ": ")
			+(if contains(paragraph_count(card.rule_text), match:"••") then split_text(match:"\n", card.rule_text).2)
		# The Fourth Ability
		+(if contains(paragraph_count(card.rule_text), match:"•••") then "\n")
			+(if card.loyalty_2 != "" then card.loyalty_cost_4)
			+(if card.loyalty_cost_4 !="" and card.loyalty_2 != "" then ": ")
			+(if contains(paragraph_count(card.rule_text), match:"•••") then split_text(match:"\n", card.rule_text).3)
		+"\n"
		+"Starting loyalty: "+card.loyalty
		}
		
	write_walker_2 := {
		# The First Ability
		card.loyalty_cost_4
			+(if card.loyalty_cost_4 !="" then ": ")
			+split_text(match:"\n", card.rule_text_2).0
		# The Second Ability
		+(if contains(paragraph_count(card.rule_text), match:"•") then "\n")
			+card.loyalty_cost_5
			+(if card.loyalty_cost_5 !="" then ": ")
			+(if contains(paragraph_count(card.rule_text_2), match:"•") then split_text(match:"\n", card.rule_text_2).1)
		# The Third Ability
		+(if contains(paragraph_count(card.rule_text), match:"••") then "\n")
			+card.loyalty_cost_6
			+(if card.loyalty_cost_6 !="" then ": ")
			+(if contains(paragraph_count(card.rule_text_2), match:"••") then split_text(match:"\n", card.rule_text_2).2)
		# The Fourth Ability
		+(if contains(paragraph_count(card.rule_text), match:"•••") then "\n")
			+card.loyalty_cost_7
			+(if card.loyalty_cost_7 !="" then ": ")
			+(if contains(paragraph_count(card.rule_text_2), match:"•••") then split_text(match:"\n", card.rule_text_2).3)
		+(if card.loyalty_2 != "" then "\n"+"Starting loyalty: "+card.loyalty_2)
		}
		
	write_sparker := {
		# The First Ability
		card.loyalty_cost_5
			+(if card.loyalty_cost_5 !="" then ": ")
			+split_text(match:"\n", card.rule_text_2).0
		# The Second Ability
		+(if contains(paragraph_count(card.rule_text_2), match:"•") then "\n")
			+card.loyalty_cost_6
			+(if card.loyalty_cost_6 !="" then ": ")
			+(if contains(paragraph_count(card.rule_text_2), match:"•") then split_text(match:"\n", card.rule_text_2).1)
		# The Third Ability
		+(if contains(paragraph_count(card.rule_text_2), match:"••") then "\n")
			+card.loyalty_cost_7
			+(if card.loyalty_cost_7 !="" then ": ")
			+(if contains(paragraph_count(card.rule_text_2), match:"••") then split_text(match:"\n", card.rule_text_2).2)
		# The Fourth Ability
		+(if contains(paragraph_count(card.rule_text_2), match:"•••") then "\n")
			+card.loyalty_cost_8
			+(if card.loyalty_cost_8 !="" then ": ")
			+(if contains(paragraph_count(card.rule_text_2), match:"•••") then split_text(match:"\n", card.rule_text_2).3)
		+(if card.loyalty_2 != "" then "\n"+"Starting loyalty: "+card.loyalty_2)
		}
	
	write_rules := {
		if card.loyalty != "" then escape_linebreaks(to_html(write_walker()))
		else if contains(card.shape, match:"leveler") then escape_linebreaks(to_html(write_leveler()))
		else escape_linebreaks(to_html(card.rule_text))
	}
	
	write_rules_2 := {
		if contains(card.shape, match:"planeswalker") and card.power != "" then escape_linebreaks(to_html(write_sparker()))
		else if card.loyalty != "" or card.loyalty_2 != "" then escape_linebreaks(to_html(write_walker_2()))
		else escape_linebreaks(to_html(card.rule_text_2))
	}
	
	write_card := {
		"\n"+determine_shape()
		+"\n"+card.card_number
		+"\n"+cmc(card.casting_cost)
		+"\n"+card.rarity
		
		+"\n"+card.name
		+"\n"+card.card_color
		+"\n"+symbols_to_html(card.casting_cost)
		+"\n"+to_text(card.type)
		+"\n"+to_text(card.power)
		+"\n"+to_text(card.toughness)
		+"\n"+write_rules()
		+"\n"+escape_linebreaks(to_html(card.flavor_text))
		+"\n"+to_html(card.illustrator)
		
		+"\n"+card.name_2
		+"\n"+card.card_color_2
		+"\n"+symbols_to_html(card.casting_cost_2)
		+"\n"+to_text(card.type_2)
		+"\n"+to_text(card.power_2)
		+"\n"+to_text(card.toughness_2)
		+"\n"+write_rules_2()
		+"\n"+escape_linebreaks(to_html(card.flavor_text_2))
		+"\n"+to_html(card.illustrator_2)
		+"\n==========="
		}
	write_cards := for each card in sort_list(cards, order_by: {input.card_number}) do write_card()
	to_string(
		 set.title+"\n"
		 +"1.0\n"
		 +write_cards)

